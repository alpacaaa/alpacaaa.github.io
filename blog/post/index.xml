<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on alpacaaa</title>
    <link>https://alpacaaa.net/blog/post/</link>
    <description>Recent content in Posts on alpacaaa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Nov 2017 11:00:39 +0100</lastBuildDate>
    
	<atom:link href="https://alpacaaa.net/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Purescript for Elm developers.</title>
      <link>https://alpacaaa.net/blog/post/purescript-explained-to-elm-devs/</link>
      <pubDate>Sun, 12 Nov 2017 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/purescript-explained-to-elm-devs/</guid>
      <description>I&amp;rsquo;ve been running Elm in production since March 2017.
Purescript always caught my eyes as a very interesting language and I&amp;rsquo;ve been learning it more and more over the past couple of months. I found that getting productive with Purescript is not as straightforward as it could be for people familiar with Elm.
So I put together a document highlighting the most significant differences between the two languages. You can find it here:</description>
    </item>
    
    <item>
      <title>In depth overview of Elm and Purescript. Lessons learned porting a game from Purescript to Elm.</title>
      <link>https://alpacaaa.net/blog/post/elm-purescript-in-depth-overview/</link>
      <pubDate>Mon, 20 Feb 2017 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-purescript-in-depth-overview/</guid>
      <description>TL;DR I&amp;rsquo;m finally able to read through Purescript/Haskell source code. I ported a game written in Purescript to Elm. You can play with the Elm version of the game right here, what follows are my thoughts on the two languages.
  How I got here A few months ago, I decided I was going to learn Haskell. The first thing I noticed was that I couldn&amp;rsquo;t read Haskell code.</description>
    </item>
    
    <item>
      <title>Let&#39;s make a GraphQL client in Elm!</title>
      <link>https://alpacaaa.net/blog/post/elm-graphql-client/</link>
      <pubDate>Wed, 18 Jan 2017 13:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-graphql-client/</guid>
      <description>I&amp;rsquo;m a big fan of GraphQL and I&amp;rsquo;d like to explore how to use it in Elm. With a statically typed language (like Elm) we should be able to achieve very nice things, such as using a DSL to write queries and determine their correctness at compile time. We&amp;rsquo;ll initially build a simple implementation and see where that takes us.
I&amp;rsquo;m going to use a service called graphqlhub which exposes some famous REST apis as a GraphQL endpoint.</description>
    </item>
    
    <item>
      <title>Building a Mastermind game in Elm.</title>
      <link>https://alpacaaa.net/blog/post/elm-mastermind-game/</link>
      <pubDate>Wed, 04 Jan 2017 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-mastermind-game/</guid>
      <description>Let&amp;rsquo;s kick off the new year with another game. This is a little bit more complex than the Memory Game and Rock Paper Scissors clones I implemented in Elm over the past few weeks. You might want to refer to those previous tutorials if you&amp;rsquo;re not entirely familiar with Elm and how the Elm Architecture works. This is what we&amp;rsquo;re going to build:
  So this is Mastermind! I created this little explanation of the types we&amp;rsquo;re going to use.</description>
    </item>
    
    <item>
      <title>Rock Paper Scissors in Elm. A beginner friendly implementation.</title>
      <link>https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/</link>
      <pubDate>Wed, 14 Dec 2016 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/</guid>
      <description>This is the classic Rock Paper Scissors game on steroids. There are two more choices that I&amp;rsquo;ve never heard before – Lizard and Spock – and the implementation is a bit more spicy because we&amp;rsquo;re going to grab random numbers from random.org so that we get to explore the Http module as well.
This is based off the pux-rock-paper-scissors game made by @spicydonuts in Purescript. If you&amp;rsquo;re interested in that language you should definitely give Pux a go because it has an almost 1:1 reimplementation of the Elm architecture and I find it pretty awesome.</description>
    </item>
    
    <item>
      <title>Building a memory game in Elm. Step by step, from scratch.</title>
      <link>https://alpacaaa.net/blog/post/elm-memory-game-from-scratch/</link>
      <pubDate>Wed, 30 Nov 2016 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-memory-game-from-scratch/</guid>
      <description>This is the classic Memory Game that I always use to approach a new frontend framework/language. It is based on a super old implementation that somebody made years ago – this little game is my point of reference to understand how things work.
What are we going to build Here&amp;rsquo;s a working demo of the finished project:
  The whole thing will be about 200LOC so it should be pretty easy to follow.</description>
    </item>
    
  </channel>
</rss>