<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>alpacaaa</title>
    <link>https://alpacaaa.net/blog/index.xml</link>
    <description>Recent content on alpacaaa</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Jan 2017 13:00:39 +0100</lastBuildDate>
    <atom:link href="https://alpacaaa.net/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let&#39;s make a GraphQL client in Elm!</title>
      <link>https://alpacaaa.net/blog/post/elm-graphql-client/</link>
      <pubDate>Wed, 18 Jan 2017 13:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-graphql-client/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m a big fan of GraphQL and I&amp;rsquo;d like to explore how to use it in Elm. With a statically typed language (like Elm) we should be able to achieve very nice things, such as using a DSL to write queries and determine their correctness at compile time. We&amp;rsquo;ll initially build a simple implementation and see where that takes us.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to use a service called &lt;a href=&#34;https://www.graphqlhub.com/&#34;&gt;graphqlhub&lt;/a&gt; which exposes some famous REST apis as a GraphQL endpoint. We&amp;rsquo;ll use Hacker News for our experiments.&lt;/p&gt;

&lt;h3 id=&#34;anatomy-of-a-query&#34;&gt;Anatomy of a query&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ll worry about the dsl and getting a fancy api to build queries later, for now let&amp;rsquo;s make sure we&amp;rsquo;re able to send a query and get some result back.&lt;/p&gt;

&lt;p&gt;It can be a little bit daunting to wrap your head around json encoders and decoders in Elm, but once you get the hang of it, you&amp;rsquo;ll realize it is not that hard. If you need a refresher on HTTP and how to send requests in Elm, check out my &lt;a href=&#34;https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/&#34;&gt;Rock Paper Scissors post&lt;/a&gt; where I go into this stuff in a little bit more detail.&lt;/p&gt;

&lt;p&gt;With that out of the way, let&amp;rsquo;s see how we can query data with GraphQL. As you might already know, the query is either encoded in the body or as a query parameter. We&amp;rsquo;ll use the latter as we don&amp;rsquo;t need to mutate anything on the server (that is, we&amp;rsquo;re only reading, not writing) so a simple &lt;code&gt;GET&lt;/code&gt; request is fine.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/3xj&#34;
    width=&#34;100%&#34;
    height=&#34;500&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Great, so we can get a simple string from the server! What you see are the ids of the top stories on Hacker News right now. But what just happened? Let&amp;rsquo;s get through it (I encourage you to play with the code and run it again if you&amp;rsquo;re not sure what&amp;rsquo;s going on).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First of all, we declare our &lt;code&gt;Model&lt;/code&gt; and &lt;code&gt;Msg&lt;/code&gt; types. The model is just the raw json we get from the server (we&amp;rsquo;ll decode it in a bit) and &lt;code&gt;FetchHNTopStories&lt;/code&gt; is our only message, that will get dispatched by the runtime when the response comes back from the server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hnTopStories&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;hnTopStories&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;      hn {&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        topStories {&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;          id&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;      }&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the GraphQL query that we&amp;rsquo;re sending. Note that it&amp;rsquo;s just a string, far from ideal. We&amp;rsquo;d like to use a DSL or something like that to create our queries, so that they can be type checked and we can be absolutely sure at compile time that they match the schema on the server (that would require knowing the schema in advance, but let&amp;rsquo;s not get ahead of ourselves :P).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encodeUri&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hnTopStories&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getString&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://www.graphqlhub.com/graphql?query=&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Waiting for a response... &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The actual request is pretty simple. As we said before, the query is sent as a query parameter. Note that it has to be encoded.  Once we create our &lt;code&gt;Request&lt;/code&gt; object, we can create a &lt;code&gt;Cmd&lt;/code&gt; through &lt;code&gt;Http.send&lt;/code&gt; so that the runtime can perform the appropriate side effects (making the request) and give us back the result through the &lt;code&gt;FetchHNTopStories&lt;/code&gt; message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; functions are fairly straightforward, nothing ground breaking is happening here.&lt;/p&gt;

&lt;h4 id=&#34;decoding-the-graphql-response-with-elm-decode-pipeline&#34;&gt;Decoding the GraphQL response with elm-decode-pipeline&lt;/h4&gt;

&lt;p&gt;So we&amp;rsquo;re getting back the ids of the top stories on Hacker News right now. But what we&amp;rsquo;re seeing is just a giant string that we need to decode, so let&amp;rsquo;s get a bit more realistic and decode the response into a &lt;code&gt;List Story&lt;/code&gt;. Here&amp;rsquo;s our &lt;code&gt;Story&lt;/code&gt; type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Right now, we&amp;rsquo;re only interested in &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt;. There are a lot more fields that we can query, we&amp;rsquo;ll do that later. Let&amp;rsquo;s update our query to match our brand new type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;hnTopStories&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;hnTopStories&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;      hn {&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        topStories {&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;          id&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;          title&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;        }&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;      }&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I briefly touched upon decoders in a &lt;a href=&#34;https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/&#34;&gt;previous tutorial&lt;/a&gt;. That stuff was pretty simple though, when you want to get serious about decoding, you&amp;rsquo;ll want to use a package such as &lt;a href=&#34;http://package.elm-lang.org/packages/NoRedInk/elm-decode-pipeline/latest&#34;&gt;elm-decode-pipeline&lt;/a&gt;. A decoder for our &lt;code&gt;Story&lt;/code&gt; type might look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Json.Decode&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Decode&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Json.Decode.Pipeline&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Pipeline&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- ...&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;storyDecoder&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;storyDecoder&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Pipeline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Pipeline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Pipeline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I decided to keep everything explicit (that is, using qualified names for the modules &lt;code&gt;Decode&lt;/code&gt; and &lt;code&gt;Pipeline&lt;/code&gt;) but if you find it easier, you can import the functions you need and drop the module name. I like the clearness of this approach to be onest. This decoder will take a JSON string and decode it to a &lt;code&gt;Story&lt;/code&gt; type (if successful). Next, we&amp;rsquo;ll want to update our &lt;code&gt;request&lt;/code&gt; function so that we don&amp;rsquo;t get back a raw string but a &lt;code&gt;List Story&lt;/code&gt; (note we changed the signature and the function &lt;code&gt;getString&lt;/code&gt; in &lt;code&gt;get&lt;/code&gt;, which allows us to specify a decoder for the response).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encodeUri&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hnTopStories&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;hn&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;topStories&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;storyDecoder&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://www.graphqlhub.com/graphql?query=&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we need to update our &lt;code&gt;Model&lt;/code&gt;, &lt;code&gt;Msg&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; functions because we&amp;rsquo;re not handling a &lt;code&gt;String&lt;/code&gt; anymore but a &lt;code&gt;List Story&lt;/code&gt;, so let&amp;rsquo;s do that! This is mostly mechanical, should be fairly easy to follow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stories&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stories&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Waiting for a response... &amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stories&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Got stories!&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;FetchHNTopStories&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nice. Up next, the &lt;code&gt;view&lt;/code&gt;! It will show a message according to the request status and will display a list of stories once we get some data back. In my eyes &lt;code&gt;(listItem &amp;lt;&amp;lt; .title)&lt;/code&gt; looks pretty neat. If you&amp;rsquo;re unsure about what that means, the extended version would be something like: &lt;code&gt;\story -&amp;gt; listItem story.title&lt;/code&gt;. We&amp;rsquo;re being fancy and smart here given that we can express ourselves in a better and shorter way in Elm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;listItem&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;listItem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;listItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stories&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;storiesList&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;storiesList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we&amp;rsquo;ve done so far is embedded below. Try to run it a second time in case you missed the initial message, so you get a good idea of what&amp;rsquo;s going on.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/5ys&#34;
    width=&#34;100%&#34;
    height=&#34;500&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;Now, let&amp;rsquo;s say we want to add more fields to our query. We can keep updating the static string that we have, but I think we can do better because it&amp;rsquo;s getting a little bit unwieldy. So let&amp;rsquo;s think about how to improve it.&lt;/p&gt;

&lt;h3 id=&#34;new-types&#34;&gt;New types&lt;/h3&gt;

&lt;p&gt;We need at least a couple of types to make things nicer. First, we&amp;rsquo;d like to define a type &lt;code&gt;Field&lt;/code&gt; which represents a field inside a query (in GraphQL speech &lt;code&gt;hn&lt;/code&gt;, &lt;code&gt;topstories&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; are all fields). They can have arguments, but let&amp;rsquo;s start simple and pretend they don&amp;rsquo;t. Here&amp;rsquo;s how I&amp;rsquo;d go about defining the &lt;code&gt;Field&lt;/code&gt; type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-elm&#34; data-lang=&#34;elm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we&amp;rsquo;re introducing a new type, &lt;code&gt;Query&lt;/code&gt;. This time, it won&amp;rsquo;t be a &lt;code&gt;type alias&lt;/code&gt; because that would not make any sense to the compiler, as it&amp;rsquo;s a recursive type (&lt;code&gt;Field&lt;/code&gt; is defined in terms of &lt;code&gt;Query&lt;/code&gt; and vice versa). So it will need to be a concrete type, fair enough.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-elm&#34; data-lang=&#34;elm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code&gt;Query&lt;/code&gt; holds the eventual children of a&lt;code&gt;Field&lt;/code&gt;. We&amp;rsquo;ll convert our current query into a &lt;code&gt;Query&lt;/code&gt; in a bit so that what we&amp;rsquo;re trying to do becomes clearer.&lt;/p&gt;

&lt;p&gt;Now, how do we go about putting together a query with our new found types? It&amp;rsquo;s easy, really, let&amp;rsquo;s define an helper function &lt;code&gt;field&lt;/code&gt; to make things more readable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-elm&#34; data-lang=&#34;elm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Field&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;fields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then use it to create the query we had before.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-elm&#34; data-lang=&#34;elm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;topStoriesQuery&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;topStoriesQuery&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;hn&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;topStories&amp;quot;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is kind of the same thing as building an Html tree in Elm – the last argument (the &lt;code&gt;Query&lt;/code&gt; in our case) represents the children of a &lt;code&gt;Field&lt;/code&gt;. Sounds good? Great, let&amp;rsquo;s move on to converting it into a string so that we can actually use it then! How do we convert a &lt;code&gt;Field&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;? Not that difficult if you think about it, we just use the field name and append it to its (possibly empty) &lt;code&gt;query&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;fieldToString&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;fieldToString&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queryToString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last thing we need is the &lt;code&gt;queryToString&lt;/code&gt; function – it turns a &lt;code&gt;Query&lt;/code&gt; value into a &lt;code&gt;String&lt;/code&gt; that we can send to the server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;queryToString&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;queryToString&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fieldToString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;
                    &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foldr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;{ &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot; }&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With our brand new functions, we can go on and update the &lt;code&gt;request&lt;/code&gt; function so that it uses the &lt;code&gt;topStoriesQuery&lt;/code&gt; that we just defined.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;queryToString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;topStoriesQuery&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encodeUri&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;hn&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;topStories&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;storyDecoder&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://www.graphqlhub.com/graphql?query=&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoded&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decoder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result should be the same, but the refactoring we did is instrumental to get to our goal mentioned at the beginning of the post!&lt;/p&gt;

&lt;h4 id=&#34;extending-the-example&#34;&gt;Extending the example&lt;/h4&gt;

&lt;p&gt;Just for the sake of having something a little bit cooler to play with, let&amp;rsquo;s extend the &lt;code&gt;Story&lt;/code&gt; type to include the &lt;code&gt;url&lt;/code&gt;. The api will return &lt;code&gt;null&lt;/code&gt; when the story is a text post (an &lt;code&gt;Ask HN&lt;/code&gt; or &lt;code&gt;Show HN&lt;/code&gt; kind of post) so we&amp;rsquo;ll need to make it optional. We&amp;rsquo;re going to do that by declaring it as a &lt;code&gt;Maybe String&lt;/code&gt; in our model and decoding it with &lt;code&gt;Json.Pipeline.optional&lt;/code&gt; defaulting to &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- ...&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;topStoriesQuery&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;topStoriesQuery&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Query&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;hn&amp;quot;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;topStories&amp;quot;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;-- we need the url&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- ...&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;storyDecoder&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;storyDecoder&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Pipeline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Pipeline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Pipeline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;required&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Pipeline&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optional&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;-- url might be null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With that done, we can change the &lt;code&gt;view&lt;/code&gt; to link to the actual stories, defaulting to the Hacker News link if it&amp;rsquo;s a text post.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;listItem&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Story&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;listItem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;url_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://news.ycombinator.com/item?id=&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;href&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;listItem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stories&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;storiesList&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;ul&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;storiesList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Find below the result, you can play with it and edit it as much as you like straight from your browser!&lt;/p&gt;

&lt;h4 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h4&gt;

&lt;p&gt;This was intended to be part one of my journey with Elm + GraphQL. There are some nice libraries out there but I want to see for myself what can be accomplished with these two technologies (my gut says a lot). I have some more stuff ready that I want to share, next time we&amp;rsquo;ll dig deeper into the rabbit hole… until then, if you enjoyed this article you can &lt;a href=&#34;https://twitter.com/_alpacaaa&#34;&gt;follow me&lt;/a&gt; on Twitter ;)&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/exg&#34;
    width=&#34;100%&#34;
    height=&#34;800&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Building a Mastermind game in Elm.</title>
      <link>https://alpacaaa.net/blog/post/elm-mastermind-game/</link>
      <pubDate>Wed, 04 Jan 2017 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-mastermind-game/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s kick off the new year with another game. This is a little bit more complex than the &lt;a href=&#34;https://alpacaaa.net/blog/post/elm-memory-game-from-scratch/&#34;&gt;Memory Game&lt;/a&gt; and &lt;a href=&#34;https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/&#34;&gt;Rock Paper Scissors&lt;/a&gt; clones I implemented in Elm over the past few weeks. You might want to refer to those previous tutorials if you&amp;rsquo;re not entirely familiar with Elm and how the Elm Architecture works. This is what we&amp;rsquo;re going to build:&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper no-focus&#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/f2t?pane=preview&#34;
    width=&#34;100%&#34;
    height=&#34;550&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;So this is &lt;strong&gt;Mastermind&lt;/strong&gt;! I created this little explanation of the types we&amp;rsquo;re going to use. Refer back to it as you skim through the code if you need to.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper no-focus&#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/qbm?pane=preview&#34;
    width=&#34;100%&#34;
    height=&#34;750&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;h4 id=&#34;types&#34;&gt;Types&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;ll need some colors to play with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Color&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Red&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Green&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Blue&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cyan&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Yellow&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Empty&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;code&gt;Empty&lt;/code&gt; constructor. It has essentially the same meaning as &lt;code&gt;Nothing&lt;/code&gt; in &lt;code&gt;Maybe&lt;/code&gt; and should make the code much easier to write and understand.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;Combination&lt;/code&gt; is just a list of colors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Color&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the user makes a guess, we&amp;rsquo;ll encode it with the &lt;code&gt;Guess&lt;/code&gt; type. We also need to give back some hints to the user (the black and white pegs).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Hint&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;CorrectPosition&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;WrongPosition&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Guess&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Hint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our model is pretty simple. We have a &lt;code&gt;correct&lt;/code&gt; field which is the &lt;code&gt;Combination&lt;/code&gt; that the user has to guess. &lt;code&gt;guesses&lt;/code&gt; is the list of &lt;code&gt;Guess&lt;/code&gt; that the user has made so far and &lt;code&gt;state&lt;/code&gt; indicates if we&amp;rsquo;re still playing or else.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Playing&lt;/code&gt; state holds the current guess (&lt;code&gt;Combination&lt;/code&gt;). Notice that, thanks to &lt;code&gt;Empty&lt;/code&gt; as a &lt;code&gt;Color&lt;/code&gt; constructor, we can have a combination that looks like this &lt;code&gt;[Red, Empty, Cyan, Cyan]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Index&lt;/code&gt; is only needed for the UI, it indicates which color in the current combination the user is choosing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Index&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameState&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Surrender&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guesses&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Guess&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameState&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;update&#34;&gt;Update&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s write some helper functions to generate a list of random colors that we&amp;rsquo;ll use to create the &lt;code&gt;Combination&lt;/code&gt; the user has to guess.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;randomList&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;randomList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;shuffle&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comparable&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;shuffle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(,)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sortBy&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unzip&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;randomCombination&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comparable&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;randomCombination&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shuffle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;take&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is very similar to the random number generation we&amp;rsquo;ve seen in the &lt;a href=&#34;https://alpacaaa.net/blog/post/elm-memory-game-from-scratch/&#34;&gt;Memory Game&lt;/a&gt;. I suggest you read that post if you don&amp;rsquo;t understand what&amp;rsquo;s going on and/or you&amp;rsquo;re still struggling with commands and the Elm architecture.&lt;/p&gt;

&lt;p&gt;I think &lt;code&gt;randomCombination&lt;/code&gt; is pretty cool because it first creates a list of lists in this form &lt;code&gt;[ [ Red, Red, Red ], [Cyan, Cyan, Cyan], …]&lt;/code&gt;, it concatenates them so we get a flat list and then uses  the other list we get as input (&lt;code&gt;random&lt;/code&gt;) to generate a shuffled version, of which we&amp;rsquo;re only interested in the first &lt;code&gt;size&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;The most interesting piece of this little game is the algorithm that takes a &lt;code&gt;Combination&lt;/code&gt; and returns a &lt;code&gt;Guess&lt;/code&gt;. I followed the guidelines found on a Stackoverflow post (&lt;a href=&#34;http://stackoverflow.com/questions/2005723/how-to-count-the-white-correctly-in-mastermind-guessing-game-in-c&#34;&gt;How to count the “white” correctly in mastermind guessing game&lt;/a&gt;), here they are:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Make two arrays, &lt;code&gt;ans&lt;/code&gt; and &lt;code&gt;guess&lt;/code&gt;, with a slot for each color.&lt;/li&gt;
&lt;li&gt;For each color, populate &lt;code&gt;ans&lt;/code&gt; with the number of pegs of that color. Similarly for &lt;code&gt;guess&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add up &lt;code&gt;min(ans[i], guess[i])&lt;/code&gt; for each &lt;code&gt;i&lt;/code&gt;. This is whites plus blacks.&lt;/li&gt;
&lt;li&gt;Add up &lt;code&gt;max(ans[i] - guess[i], 0)&lt;/code&gt; for each &lt;code&gt;i&lt;/code&gt;. This is the number of whites.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;We obviously need to convert them in a more functional style. This will be a good exercise if you find yourself thinking in imperative code and can&amp;rsquo;t figure out how to write something in a functional manner. Let&amp;rsquo;s go over each of these steps:&lt;/p&gt;

&lt;h5 id=&#34;1-make-two-arrays-ans-and-guess-with-a-slot-for-each-color&#34;&gt;1. Make two arrays, &lt;code&gt;ans&lt;/code&gt; and &lt;code&gt;guess&lt;/code&gt;, with a slot for each color.&lt;/h5&gt;

&lt;p&gt;This one is easy, we&amp;rsquo;ll just create a fixed &lt;code&gt;List&lt;/code&gt; with all of our colors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;colors&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Color&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;colors&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Blue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cyan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Yellow&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&#34;2-for-each-color-populate-ans-with-the-number-of-pegs-of-that-color-similarly-for-guess&#34;&gt;2. For each color, populate &lt;code&gt;ans&lt;/code&gt; with the number of pegs of that color. Similarly for &lt;code&gt;guess&lt;/code&gt;.&lt;/h5&gt;

&lt;p&gt;Let&amp;rsquo;s make a function &lt;code&gt;populate&lt;/code&gt; that does exactly that. It takes a &lt;code&gt;Combination&lt;/code&gt; (either &lt;code&gt;ans&lt;/code&gt; or &lt;code&gt;guess&lt;/code&gt;) and returns a list of tuples in the form &lt;code&gt;( Color, Int )&lt;/code&gt;. The second value (&lt;code&gt;Int&lt;/code&gt;) is obviously the number of occurencies of that color in the &lt;code&gt;Combination&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;populate&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;populate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combination&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;countOccurrencies&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combination&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;countOccurrencies&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;colors&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&#34;3-add-up-min-ans-i-guess-i-for-each-i-this-is-whites-plus-blacks&#34;&gt;3. Add up &lt;code&gt;min(ans[i], guess[i])&lt;/code&gt; for each &lt;code&gt;i&lt;/code&gt;. This is whites plus blacks.&lt;/h5&gt;

&lt;p&gt;We&amp;rsquo;ll create a function &lt;code&gt;processGuess&lt;/code&gt; that takes two &lt;code&gt;Combination&lt;/code&gt; (the guess and the correct one). We&amp;rsquo;ll employ the &lt;code&gt;populate&lt;/code&gt; function we just created.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;processGuess&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Guess&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;processGuess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;populate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;gus&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;populate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count2&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;whiteBlacks&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gus&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
      &lt;span class=&#34;c1&#34;&gt;-- TODO...  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;p&lt;/code&gt; is a helper function that takes two tuples in the form &lt;code&gt;( Color, Int )&lt;/code&gt; and returns the minimum value between the two integers. &lt;code&gt;whiteBlacks&lt;/code&gt; is clearly the sum of the blacks and whites.&lt;/p&gt;

&lt;h5 id=&#34;4-add-up-max-ans-i-guess-i-0-for-each-i-this-is-the-number-of-whites&#34;&gt;4. Add up &lt;code&gt;max(ans[i] - guess[i], 0)&lt;/code&gt; for each &lt;code&gt;i&lt;/code&gt;. This is the number of whites.&lt;/h5&gt;

&lt;p&gt;I found this to be very much unnecessary. Instead of counting the number of whites, it is much easier to count the number of blacks and then derive the whites by just subtracting the blacks from the total. Finding out the number of blacks is fairly straightforward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;blacks&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;whites&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;whiteBlacks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blacks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re essentially creating a new list with the result of comparing the two colors at the same index. This will be a list like &lt;code&gt;[True, False, False, False]&lt;/code&gt;. All is left to do is to count the &lt;code&gt;True&lt;/code&gt; values, so we&amp;rsquo;ll filter on &lt;code&gt;identity&lt;/code&gt; (recall that &lt;code&gt;List.filter&lt;/code&gt; expects a &lt;code&gt;Bool&lt;/code&gt; so we&amp;rsquo;re already good) and take the length of the resulting list.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the function in full:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;repeat&lt;/span&gt;

&lt;span class=&#34;nf&#34;&gt;processGuess&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Combination&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Guess&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;processGuess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;populate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;gus&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;populate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count2&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;whiteBlacks&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ans&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gus&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;blacks&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;identity&lt;/span&gt;
                &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;whites&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;whiteBlacks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blacks&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;CorrectPosition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;blacks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;WrongPosition&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;whites&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just for reference, we can use it in the &lt;code&gt;update&lt;/code&gt; function like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combination&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;isOver&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;combination&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;processGuess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;combination&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;correct&lt;/span&gt;

            &lt;span class=&#34;n&#34;&gt;newModel&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guesses&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;guesses&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isOver&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emptyCombination&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Super cool!&lt;/p&gt;

&lt;h4 id=&#34;wrapping-up&#34;&gt;Wrapping up&lt;/h4&gt;

&lt;p&gt;The view is fairly simple so I&amp;rsquo;m not going to touch on that. As always, I encourage you to go through the source code and play with it! You can do it directly in your browser here or on &lt;a href=&#34;https://runelm.io/c/f2t&#34;&gt;runelm.io&lt;/a&gt;. The source code is also available on &lt;a href=&#34;https://github.com/alpacaaa/elm-mastermind&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/f2t&#34;
    width=&#34;100%&#34;
    height=&#34;550&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;I hope you got something out of this, if you enjoyed this article &lt;a href=&#34;https://twitter.com/_alpacaaa&#34;&gt;follow me&lt;/a&gt; on Twitter and &lt;code&gt;Maybe&lt;/code&gt; share it along :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rock Paper Scissors in Elm. A beginner friendly implementation.</title>
      <link>https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/</link>
      <pubDate>Wed, 14 Dec 2016 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-rock-paper-scissors-beginner/</guid>
      <description>

&lt;p&gt;This is the classic Rock Paper Scissors game on steroids. There are two more choices that I&amp;rsquo;ve never heard before – &lt;code&gt;Lizard&lt;/code&gt; and &lt;code&gt;Spock&lt;/code&gt; – and the implementation is a bit more spicy because we&amp;rsquo;re going to grab random numbers from &lt;a href=&#34;https://www.random.org&#34;&gt;random.org&lt;/a&gt; so that we get to explore the &lt;code&gt;Http&lt;/code&gt; module as well.&lt;/p&gt;

&lt;p&gt;This is based off the &lt;a href=&#34;https://github.com/spicydonuts/pux-rock-paper-scissors&#34;&gt;pux-rock-paper-scissors&lt;/a&gt; game made by &lt;a href=&#34;https://github.com/spicydonuts/&#34;&gt;@spicydonuts&lt;/a&gt; in Purescript. If you&amp;rsquo;re interested in that language you should definitely give &lt;a href=&#34;https://github.com/alexmingoia/purescript-pux&#34;&gt;Pux&lt;/a&gt; a go because it has an almost 1:1 reimplementation of the Elm architecture and I find it pretty awesome.&lt;/p&gt;

&lt;h4 id=&#34;what-we-are-going-to-build&#34;&gt;What we are going to build&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s a working demo of the finished project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CGuMoEF.gif&#34; alt=&#34;Rock paper scissors deathmatch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Just kidding, here&amp;rsquo;s the finished project. Please enjoy this game responsibly and reach out if you become a world champion.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper no-focus&#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/9cr?pane=preview&#34;
    width=&#34;100%&#34;
    height=&#34;550&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s very simple, in about 300 LOC it should be pretty easy to follow along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: If you&amp;rsquo;re looking for a more in depth tutorial, check out &lt;a href=&#34;https://alpacaaa.net/blog/post/elm-memory-game-from-scratch/&#34;&gt;Building a memory game in Elm from scratch&lt;/a&gt; that covers some basic ground that will be assumed here.&lt;/p&gt;

&lt;h4 id=&#34;types-first&#34;&gt;Types first&lt;/h4&gt;

&lt;p&gt;All right let&amp;rsquo;s get down to it. First of all we&amp;rsquo;ll want to encode all the possible choices, so we&amp;rsquo;ll create a new type &lt;code&gt;Choice&lt;/code&gt; for this purpose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next up, we want to define the different outcomes of a match. That is, whether the player or the computer won, or it&amp;rsquo;s a tie.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameResult&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;PlayerWins&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;ComputerWins&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Tie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re going to keep the player score that it&amp;rsquo;s going to be updated after every match. This is just an &lt;code&gt;Int&lt;/code&gt; but to make our code more explicit, let&amp;rsquo;s add a type alias.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our &lt;code&gt;Model&lt;/code&gt; defines 3 states:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The player has to make a choice, so only the score will be stored in the model.&lt;/li&gt;
&lt;li&gt;We have a player choice and we&amp;rsquo;re waiting for the computer to generate a random one.&lt;/li&gt;
&lt;li&gt;The game is over, we have both choices, the game result and the updated score.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s write this down&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;PlayerTurn&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;ComputerTurn&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameResult&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now to the &lt;code&gt;Msg&lt;/code&gt;! It&amp;rsquo;s pretty straightforward.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;NoOp&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;ChoiceClicked&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;RandomNumberReceived&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Reset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reason for the &lt;code&gt;Result Http.Error Int&lt;/code&gt; type is pretty straightforward . Given that there&amp;rsquo;s an http request involved (remember, we&amp;rsquo;re grabbing random numbers from an online api) we have to account for errors. If all it&amp;rsquo;s fine we&amp;rsquo;ll get back an &lt;code&gt;Int&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;a-little-tour-of-http-requests-and-json-decoding&#34;&gt;A little tour of HTTP requests and JSON decoding&lt;/h5&gt;

&lt;p&gt;Next up, a function that creates a &lt;code&gt;Task&lt;/code&gt; describing the http request we want the Elm runtime to make. Just a reminder, in Elm there&amp;rsquo;s no way to perform side effects inside our code. We can only &lt;em&gt;describe&lt;/em&gt; what needs to happen by returning a Command (&lt;code&gt;Cmd&lt;/code&gt;) in our &lt;code&gt;update&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;randomNumberUrl&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;https://www.random.org/integers/?num=1&amp;amp;min=1&amp;amp;max=5&amp;amp;col=1&amp;amp;base=10&amp;amp;format=plain&amp;amp;rnd=new&amp;quot;&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;grabRandomNumber&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;grabRandomNumber&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randomNumberUrl&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;RandomNumberReceived&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This might not seem like a lot, but it&amp;rsquo;s helpful to go over what&amp;rsquo;s happening. &lt;code&gt;randomNumberUrl&lt;/code&gt; is easy, it&amp;rsquo;s just the api endpoint that will return a integer between 1 and 5. &lt;code&gt;Http.get&lt;/code&gt; is a function provided by the &lt;code&gt;Http&lt;/code&gt; module that given a URL and a &lt;code&gt;Decoder&lt;/code&gt;, will return a &lt;code&gt;Request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, JSON encoding and decoding is an hot topic among the Elm community and for a reason. It&amp;rsquo;s not always easy to wrap your head around code that performs these kind of operations.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s take a step back. Why do we need decoding in the first place? What does it even mean? When we make http requests, we are talking to the external world (meaning we&amp;rsquo;re leaving the peaceful and pure land of Elm) and we are getting back &lt;em&gt;some kind&lt;/em&gt; of data. Being Elm a strongly typed language, we have to know at compile time what kind of data we&amp;rsquo;re dealing with. This might seem like a burden at first, because every little detail of the (possibly complicated) JSON data we&amp;rsquo;re getting back from our api, needs to be explicitely described in Elm, otherwhise that data cannot be consumed.&lt;/p&gt;

&lt;p&gt;If you think this sucks and it&amp;rsquo;s just a waste of time, take a deep breath and appreciate how awesome this really is.&lt;/p&gt;

&lt;p&gt;You can be &lt;em&gt;absolutely sure&lt;/em&gt; at compile time that whatever data you&amp;rsquo;re getting back from the server, will have the &lt;strong&gt;correct&lt;/strong&gt; shape that your code is &lt;strong&gt;expecting&lt;/strong&gt; it to. Or you&amp;rsquo;ll find yourself with an error that, by the way, you&amp;rsquo;ll be forced to handle by the compiler. So there&amp;rsquo;s no way your program is going to blow up at runtime because you were expecting the &lt;code&gt;description&lt;/code&gt; field to be a &lt;code&gt;String&lt;/code&gt; but the api is returning &lt;code&gt;null&lt;/code&gt;! How cool is that?&lt;/p&gt;

&lt;p&gt;In order to have this peace of mind we need to spend a little bit of time to tell the compiler how to transform the JSON data that we receive from the outside into a valid Elm type. You can go pretty crazy when decoding, by using nice stuff like &lt;code&gt;Maybe&lt;/code&gt; or adding field conditionally, based on the presence of another field or the value of some other.&lt;/p&gt;

&lt;p&gt;So, this is why &lt;strong&gt;we need a Decoder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Decoders are provided in the &lt;code&gt;Json&lt;/code&gt; module that comes shipped in &lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/latest&#34;&gt;core&lt;/a&gt;. You can find pretty well written tutorials on decoders elsewhere, but I just want to briefly point out what our simple decoder is doing. The &lt;code&gt;Json.Decode.int&lt;/code&gt; decoder essentially takes a JSON number and converts it into an &lt;code&gt;Int&lt;/code&gt; so that we can work with it. There&amp;rsquo;s no black magic, that&amp;rsquo;s all is happening here.&lt;/p&gt;

&lt;p&gt;Moving on, we&amp;rsquo;re piping our &lt;code&gt;Request&lt;/code&gt; into a call to &lt;code&gt;Http.send&lt;/code&gt; that will effectively create a &lt;code&gt;Cmd&lt;/code&gt; describing the http request we want to make and what &lt;code&gt;Msg&lt;/code&gt; will be fed back into the update function once the request completes. Note that the message will have to accept a &lt;code&gt;Result&lt;/code&gt; as an argument, because we have to take failure into account and the &lt;code&gt;Result&lt;/code&gt; type allows us to do just that (either we get an error or the data we wanted).&lt;/p&gt;

&lt;p&gt;Here are a few type signatures in case you&amp;rsquo;re wondering.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Error&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Decode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;the-update-function&#34;&gt;The Update function&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s begin with a simple function that returns the initial state of the game. We simply say that it&amp;rsquo;s the player&amp;rsquo;s turn and that the score is zero.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;PlayerTurn&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also need a &lt;code&gt;List (Choice, Choice)&lt;/code&gt; that holds all the possible winning pairs that we will use to determine the winner.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;winConditions&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;winConditions&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s how we do it. Given two values of type &lt;code&gt;Choice&lt;/code&gt;, check if the first one wins the game.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;wins&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Bool&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;wins&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;any&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;winConditions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;List.any&lt;/code&gt; is pretty cool because it will stop at the first match, so it won&amp;rsquo;t iterate over the full list. We are creating a simple helper function &lt;code&gt;match&lt;/code&gt; that uses the &lt;code&gt;==&lt;/code&gt; function in prefix position (note the &lt;code&gt;()&lt;/code&gt; brackets) and partially applies it with the two choices we got as input (&lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We also want to know the result of a game.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;determineResult&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameResult&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;determineResult&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Tie&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wins&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;PlayerWins&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;ComputerWins&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty straightforward stuff.&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;ll need a way to convert the &lt;code&gt;Int&lt;/code&gt; we&amp;rsquo;re getting back from our random number generator into a &lt;code&gt;Choice&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;intToChoice&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;intToChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt;

        &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt;

        &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt;

        &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt;

        &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt;

        &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;intToChoice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code&gt;_&lt;/code&gt; branch. This is needed because the compiler tells us that there are many more numbers we should account for besides those in the range of our interest (1-5). A very simple and acceptable solution would be to pick a fixed choice and return that for any other integer greater than 5. But we can be a little bit smarter and feed back the unexpected integer we received by making sure that it&amp;rsquo;s between 1 and 5, in order to keep some sort of randomness in place.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create an helper function that updates the current score given a game result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;updateScore&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameResult&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;updateScore&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Tie&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;PlayerWins&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;ComputerWins&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now a function that we will use to update the game state and return the &lt;code&gt;Cmd&lt;/code&gt; that generates a random number whenever it&amp;rsquo;s appropriate (after the player&amp;rsquo;s turn). Note that we return the &lt;code&gt;model&lt;/code&gt; unchanged if we&amp;rsquo;re in a state where we&amp;rsquo;re not expecting the player to make their choice. Think for example of a slow http request that would allow the player to click on a different choice button. That would dispatch another &lt;code&gt;ChoiceClicked&lt;/code&gt; message inside our &lt;code&gt;update&lt;/code&gt; function, but given that we know it&amp;rsquo;s the computer&amp;rsquo;s turn, we don&amp;rsquo;t do anything and wait for the random number to arrive.&lt;/p&gt;

&lt;p&gt;Also, we could improve our game further by making sure the buttons in the UI are disabled when we are in the &lt;code&gt;ComputerTurn&lt;/code&gt; state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;updatePlayerChoice&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;updatePlayerChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;ComputerTurn&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;PlayerTurn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;ComputerTurn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;grabRandomNumber&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;ComputerTurn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;grabRandomNumber&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s our helper function to deal with the random number that will be transformed into a valid computer choice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;updateComputerChoice&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;updateComputerChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;ComputerTurn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;intToChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;determineResult&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;newScore&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;updateScore&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newScore&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, we&amp;rsquo;ll transition to the &lt;code&gt;GameOver&lt;/code&gt; state. And finally, the &lt;code&gt;update&lt;/code&gt; function in all its glory. Simple and to the point thanks to the functions we just wrote.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;NoOp&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;ChoiceClicked&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;updatePlayerChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;RandomNumberReceived&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;updateComputerChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;RandomNumberReceived&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Reset&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;createModel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course this is a bad example in terms of error handling, because we&amp;rsquo;re just ignoring it! Ideally we&amp;rsquo;ll have some kind of error message in our &lt;code&gt;Model&lt;/code&gt; that we can populate appropriately when things explode.&lt;/p&gt;

&lt;h4 id=&#34;the-view-function&#34;&gt;The View function&lt;/h4&gt;

&lt;p&gt;Let&amp;rsquo;s begin with a simple function to convert a &lt;code&gt;Choice&lt;/code&gt; into a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;choiceToString&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;choiceToString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;Rock&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;Paper&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;Scissors&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;Lizard&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;Spock&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Same stuff when we have a &lt;code&gt;GameResult&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;resultToString&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameResult&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;resultToString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Tie&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;It&amp;#39;s a tie!&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;PlayerWins&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;Yay, you win!&amp;quot;&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;ComputerWins&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;s&#34;&gt;&amp;quot;You lose :(&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ll need a lower case css class for each &lt;code&gt;Choice&lt;/code&gt;, that&amp;rsquo;s easy enough with our &lt;code&gt;choiceToString&lt;/code&gt; helper.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;choiceToClass&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;choiceToClass&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toLower&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceToString&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember: &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; is function composition. It&amp;rsquo;s equivalent to &lt;code&gt;choiceToClass c = String.toLower (choiceToString c)&lt;/code&gt; but cleaner and shorter.&lt;/p&gt;

&lt;p&gt;The next one is purely cosmetic, it just creates an &lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;divider&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;divider&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;hr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we have a &lt;code&gt;Choice&lt;/code&gt; and we want to show a corresponding huge image on the screen.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;showChoice&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;showChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;card &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceToClass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Same with &lt;code&gt;GameResult&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;showResult&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameResult&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;showResult&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resultToString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And &lt;code&gt;Score&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;showPlayerScore&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;showPlayerScore&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Score: &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We want a Reset button that will reset the game state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;resetButton&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;resetButton&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;reset&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Reset!&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And also a Choice button so that the player can make a choice.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;choiceButton&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;choiceButton&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;button&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;choice &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choiceToClass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ChoiceClicked&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceToString&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next is a cool one. Basically, if you look at our &lt;code&gt;Model&lt;/code&gt; at any one time we could have a player choice, a computer choice and a result. But we want our UI code to be written in a simple and straightforward way, so instead of making the &lt;code&gt;showChoice&lt;/code&gt; and &lt;code&gt;showResult&lt;/code&gt; functions more complicated so that they could accept a &lt;code&gt;Maybe&lt;/code&gt; and render something appropriately, we&amp;rsquo;ll create another function to do the dirty work and call the appropriate view function only when we have a value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;maybeRender&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;maybeRender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s say we want to render the computer&amp;rsquo;s choice. We don&amp;rsquo;t want to check whether the state is &lt;code&gt;PlayerTurn&lt;/code&gt; or &lt;code&gt;ComputerTurn&lt;/code&gt; or whatever, we just want to call &lt;code&gt;showChoice&lt;/code&gt;. To make it safe, we&amp;rsquo;ll call &lt;code&gt;maybeRender showChoice computerChoice&lt;/code&gt; so that an empty &lt;code&gt;div&lt;/code&gt; will be rendered if there&amp;rsquo;s nothing to show. This is very important because it allows us to keep our other functions simple and stupid (again, by not having to deal with &lt;code&gt;Maybe&lt;/code&gt; directly).&lt;/p&gt;

&lt;p&gt;We are almost done, our last helper is &lt;code&gt;gameView&lt;/code&gt; which employs the &lt;code&gt;maybeRender&lt;/code&gt; function quite a bit so that our UI is simple to read and reason about.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gameView&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Choice&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameResult&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;gameView&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;playerChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computerChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gameResult&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceButton&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Rock&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceButton&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Paper&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceButton&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Scissors&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceButton&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Lizard&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choiceButton&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Spock&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;divider&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maybeRender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;playerChoice&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maybeRender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showChoice&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computerChoice&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maybeRender&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showResult&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gameResult&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;showPlayerScore&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maybeRender&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resetButton&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gameResult&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This function will be called by the main &lt;code&gt;view&lt;/code&gt; function with different parameters depending on the state. I can&amp;rsquo;t stress enough how useful it is to restrict the use of &lt;code&gt;Maybe&lt;/code&gt; to a couple of functions (&lt;code&gt;maybeRender&lt;/code&gt; and &lt;code&gt;gameView&lt;/code&gt;). All the other functions are as simple as they can be and this greatly improves the quality of our program in my opinion.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;PlayerTurn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gameView&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Nothing&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;h3&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Make your move!&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;ComputerTurn&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;gameView&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Nothing&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;gameView&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;player&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;computer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With &lt;code&gt;gameView&lt;/code&gt;, the main &lt;code&gt;view&lt;/code&gt; function is extremely nice and I really dig how it is laid out.&lt;/p&gt;

&lt;p&gt;This is it! You can play with this code directly in your browser here or on &lt;a href=&#34;https://runelm.io/c/9cr&#34;&gt;runelm.io&lt;/a&gt;. The source code is also available on &lt;a href=&#34;https://github.com/alpacaaa/elm-rock-paper-scissors&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/9cr&#34;
    width=&#34;100%&#34;
    height=&#34;1000&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;If you enjoyed this article, do let me know and share it along! You can &lt;a href=&#34;https://twitter.com/_alpacaaa&#34;&gt;follow me&lt;/a&gt; on Twitter if this kind of things interest you.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a memory game in Elm. Step by step, from scratch.</title>
      <link>https://alpacaaa.net/blog/post/elm-memory-game-from-scratch/</link>
      <pubDate>Wed, 30 Nov 2016 11:00:39 +0100</pubDate>
      
      <guid>https://alpacaaa.net/blog/post/elm-memory-game-from-scratch/</guid>
      <description>

&lt;p&gt;This is the classic Memory Game that I always use to approach a new frontend framework/language. It is based on a super old implementation that somebody made years ago – this little game is my point of reference to understand how things work.&lt;/p&gt;

&lt;h4 id=&#34;what-are-we-going-to-build&#34;&gt;What are we going to build&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s a working demo of the finished project:&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper no-focus&#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/fbi?pane=preview&#34;
    width=&#34;100%&#34;
    height=&#34;1000&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;The whole thing will be about 200LOC so it should be pretty easy to follow. I&amp;rsquo;m not going to touch on what Elm is or why you might want to use it, there&amp;rsquo;s enough of that around for you to read already.&lt;/p&gt;

&lt;h4 id=&#34;step-1-draw-the-grid&#34;&gt;Step 1 – Draw the grid&lt;/h4&gt;

&lt;p&gt;We want to get some static markup going, so let&amp;rsquo;s begin with something very simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exposing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exposing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Html.Attributes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exposing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Never&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;program&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createModel&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Sub&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;


&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;NoOp&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;h1&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;There you go!&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s not much to see here yet, just a giant &lt;strong&gt;There you go!&lt;/strong&gt; on our screen (You can check it out &lt;a href=&#34;https://runelm.io/c/qw1&#34;&gt;here&lt;/a&gt;). Let&amp;rsquo;s change that.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll begin with the &lt;code&gt;createCard&lt;/code&gt; function, which will be the single &lt;code&gt;div&lt;/code&gt; showing the card picture.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createCard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;createCard&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;container&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;-- try changing (&amp;quot;flipped&amp;quot;, False) into (&amp;quot;flipped&amp;quot;, True)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;classList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;card&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;flipped&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;card-back&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;front card-dinosaur&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s a bunch of hardcoded stuff in here, but it will be enough for now. Specifically, we&amp;rsquo;ll want to replace the &lt;code&gt;dinosaur&lt;/code&gt; image and we&amp;rsquo;ll want the &lt;code&gt;flipped&lt;/code&gt; class to update depending on the state of our card.&lt;/p&gt;

&lt;p&gt;For now, let&amp;rsquo;s just place a few cards on the page, by changing our &lt;code&gt;view&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;wrapper&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createCard&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createCard&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createCard&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createCard&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createCard&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our grid is starting to take shape.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper no-focus&#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/tt2?pane=preview&#34;
    width=&#34;100%&#34;
    height=&#34;500&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;h4 id=&#34;step-2-show-some-cards&#34;&gt;Step 2 – Show some cards&lt;/h4&gt;

&lt;p&gt;Time to show some real cards.&lt;/p&gt;

&lt;p&gt;First of all, we need to introduce a couple of types:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Group&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flipped&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Bool&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;


&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Group&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;A&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;B&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;Card&lt;/code&gt; type is quite simple, we need to have a &lt;code&gt;group&lt;/code&gt; property to differentiate between the two different copies of the same card in the deck. Let&amp;rsquo;s also list all the available cards:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cards&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;cards&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;dinosaur&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;8-ball&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;baked-potato&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;kronos&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;rocket&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;skinny-unicorn&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;that-guy&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;zeppelin&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ll define a function &lt;code&gt;initCard&lt;/code&gt; that returns a &lt;code&gt;Card&lt;/code&gt; object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;initCard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Group&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;initCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flipped&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;False&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It can be used like this: &lt;code&gt;initCard A &amp;quot;dinosaur&amp;quot;&lt;/code&gt; and that&amp;rsquo;s exactly what we&amp;rsquo;re going to do in order to create our deck:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;groupA&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initCard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cards&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;groupB&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initCard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cards&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;concat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groupA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;groupB&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;deck&lt;/code&gt; will hold two copies of all the cards we defined. You might notice this doesn&amp;rsquo;t take shuffling into account, we&amp;rsquo;ll look into it later.&lt;/p&gt;

&lt;p&gt;Cool, let&amp;rsquo;s update the &lt;code&gt;Model&lt;/code&gt; so that we can show actual cards in our &lt;code&gt;view&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the &lt;code&gt;createModel&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;-- Our model now constists of the unshuffled deck&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;none&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our game will only have a generic &lt;code&gt;Playing&lt;/code&gt; state for now, we&amp;rsquo;ll add more later on.&lt;/p&gt;

&lt;p&gt;And now to the view layer. &lt;code&gt;createCard&lt;/code&gt;, as it is, is pretty useless because we can&amp;rsquo;t say what&amp;rsquo;s the card we want to create, so let&amp;rsquo;s add an argument and update the function accordingly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;cardClass&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;cardClass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;card-&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;createCard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;createCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;container&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;-- try changing (&amp;quot;flipped&amp;quot;, False) into (&amp;quot;flipped&amp;quot;, True)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;classList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;card&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;flipped&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;card-back&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;front &amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cardClass&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We introduced &lt;code&gt;cardClass&lt;/code&gt; to get the proper CSS class. You can see that the &lt;code&gt;front&lt;/code&gt; image is now dynamic, and this also shows how you can concatenate strings in Elm (which are just aliases for &lt;code&gt;List Char&lt;/code&gt; – that&amp;rsquo;s why it works!)&lt;/p&gt;

&lt;p&gt;We can get rid of the hardcoded cards that we have and properly map through our deck, by changing the &lt;code&gt;view&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;wrapper&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice we had to pattern match on the model. It looks dumb with a single case but we&amp;rsquo;ll add more. Now change &lt;code&gt;(&amp;quot;flipped&amp;quot;, False)&lt;/code&gt; to &lt;code&gt;(&amp;quot;flipped&amp;quot;, True)&lt;/code&gt; in &lt;code&gt;createCard&lt;/code&gt; and look at all the beautiful card pictures (do it yourself below, just edit the code and run it! It&amp;rsquo;s on line 110).&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/nee&#34;
    width=&#34;100%&#34;
    height=&#34;500&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;h4 id=&#34;step-3-introducing-messages-and-commands&#34;&gt;Step 3 – Introducing Messages and Commands&lt;/h4&gt;

&lt;p&gt;You might already be familiar with the concept of Messages in Elm, but I feel like Commands are the truly beautiful thing about TEA (which took me a while to realize is an achronym for &amp;ldquo;The Elm Architecture&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Commands are our way to describe side effects – impure, nasty stuff that our programs need to do at some point, but undermine the purity of our code. With Commands, you can &lt;em&gt;describe&lt;/em&gt; (this is very important) what you want the platform (or runtime) to do, and then tell it to send back the results through a Message.&lt;/p&gt;

&lt;p&gt;You might be wondering what an example of an effect could be: HTTP requests, saving to localStorage, reading the time. Ultimately, even rendering our Elm app and having it inserted into the DOM is a side effect, but managed by the Elm runtime. So, what kind of side effect is involved here? At the end of the day, this program is so simple that it could do without any effects. Well, we need to shuffle the deck remember? That implies we need some kind of random number generator, which is impure.&lt;/p&gt;

&lt;p&gt;We can return commands along side the updated model in the &lt;code&gt;udpate&lt;/code&gt; function (that explains why the returned type is a tuple in the form of &lt;code&gt;(Model, Cmd Msg)&lt;/code&gt;). But we can also hand over Commands to the runtime when we first create our model in our &lt;code&gt;main&lt;/code&gt; function. So let&amp;rsquo;s get down to do some random number generation.&lt;/p&gt;

&lt;p&gt;First of all, import the &lt;code&gt;Random&lt;/code&gt; module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Random&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can read about how this module works in &lt;a href=&#34;http://package.elm-lang.org/packages/elm-lang/core/latest/Random&#34;&gt;the docs&lt;/a&gt; but the gist of it is that you first need to create an appropriate &lt;code&gt;Generator&lt;/code&gt;, depending on the type you&amp;rsquo;re dealing with, and then use &lt;code&gt;Random.generate&lt;/code&gt; to create the Command that will be handed off to the runtime. We need to generate random numbers, so we can stick with &lt;code&gt;Generator Int&lt;/code&gt; but it would be cool if we could get back a list of random numbers instead of a single one, and for that we can use &lt;code&gt;Random.list&lt;/code&gt;. So we can create a function &lt;code&gt;randomList&lt;/code&gt; which gets an argument &lt;code&gt;len&lt;/code&gt; and returns a Command that will generate &lt;code&gt;len&lt;/code&gt; random numbers from 0 to 100.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;randomList&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;randomList&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we said, when the runtime executes our command, it will pass back the results in the update function using a Message of our choice. We can extend our &lt;code&gt;Msg&lt;/code&gt; type to include a &lt;code&gt;Shuffle (List Int)&lt;/code&gt; value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;NoOp&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Shuffle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can now return a Command in our &lt;code&gt;createModel&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;createModel&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;randomList&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Shuffle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s pretty cool, so we can now use the random list of numbers to shuffle our deck. Let&amp;rsquo;s take care of the &lt;code&gt;update&lt;/code&gt; function for a second, because right now it&amp;rsquo;s pretty static and dumb. We want it to react to the different actions that will be coming through – right now we&amp;rsquo;re interested in &lt;code&gt;Shuffle&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- a ! b is equivalent to (a, Cmd.batch b)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;NoOp&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Shuffle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;shuffleDeck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to implement &lt;code&gt;shuffleDeck&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;shuffleDeck&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;comparable&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;shuffleDeck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(,)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xs&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sortBy&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unzip&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s what it does:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It creates tuples of this form &lt;code&gt;(Card, Int)&lt;/code&gt; where the second element is the random number&lt;/li&gt;
&lt;li&gt;Then the list gets sorted by the second element, effectively shuffling it.&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;unzip&lt;/code&gt; to transform our list of tuples to the original form with two lists &lt;code&gt;([Card], [Int])&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;re no longer interested in the random numbers (second list) so we only return the first element.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If we use the &lt;code&gt;(&amp;quot;flipped&amp;quot;, False)&lt;/code&gt; trick again on &lt;code&gt;createCard&lt;/code&gt;, you can see that by refreshing a few times our cards change order, yay! Try it for yourself!&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/0wh&#34;
    width=&#34;100%&#34;
    height=&#34;500&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;h4 id=&#34;step-4-make-cards-flippable&#34;&gt;Step 4 – Make cards flippable&lt;/h4&gt;

&lt;p&gt;Looking back at our &lt;code&gt;Model&lt;/code&gt; we can see there&amp;rsquo;s a &lt;code&gt;flipped&lt;/code&gt; property that indicates whether the card is facing up or down. We want to switch this when the user clicks on a card.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s easy enough to do, but we need to add the &lt;code&gt;Flip&lt;/code&gt; tag in our &lt;code&gt;Msg&lt;/code&gt; to indicate the user has clicked on a card.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;NoOp&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Shuffle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great, now let&amp;rsquo;s take this action into account in the &lt;code&gt;update&lt;/code&gt; function. We&amp;rsquo;ll need to implement an helper function (let&amp;rsquo;s call it &lt;code&gt;flip&lt;/code&gt;) that, given our desired flipped state and two cards, takes care of updating the &lt;code&gt;flipped&lt;/code&gt; property if the cards match.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isFlipped&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flipped&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isFlipped&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This might seem pointless but it&amp;rsquo;s actually very much needed when extending the &lt;code&gt;update&lt;/code&gt; function, because there is no mutable stuff (luckily!) so we have to return a new copy of the &lt;code&gt;deck&lt;/code&gt; and, in order to do that, it&amp;rsquo;s quite useful to have a &lt;code&gt;flip&lt;/code&gt; function that only updates the card we want to update. Let&amp;rsquo;s see how we might use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- update function&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;Flip&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to import &lt;code&gt;onClick&lt;/code&gt; so that users can click on cards:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Html.Events&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exposing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, we can proceed updating the &lt;code&gt;createCard&lt;/code&gt; function so that it tags click events with &lt;code&gt;Flip&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--- createCard&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;classList&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;card&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;flipped&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flipped&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Flip&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You&amp;rsquo;ll now be able to flip cards back and forth without any constraints. In the next step we&amp;rsquo;re going to implement a proper game logic when &lt;code&gt;Flip&lt;/code&gt; is dispatched, so that cards can be flipped only when the game allows it and matched cards remain face up.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/ug4&#34;
    width=&#34;100%&#34;
    height=&#34;500&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;h4 id=&#34;step-5-game-logic&#34;&gt;Step 5 – Game logic&lt;/h4&gt;

&lt;p&gt;So far, our model consisted of a single state &lt;code&gt;Playing Deck&lt;/code&gt;. We&amp;rsquo;ll add two more: &lt;code&gt;Guessing Deck Card&lt;/code&gt; and &lt;code&gt;MatchCard Deck Card Card&lt;/code&gt;. It&amp;rsquo;s intuitive to see how they might be used, but just to make sure we&amp;rsquo;re on the same page:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our game will be in the state &lt;code&gt;Guessing Deck Card&lt;/code&gt; when a single card is flipped and another one awaits to be flipped and (eventually) matched.&lt;/li&gt;
&lt;li&gt;The state &lt;code&gt;MatchCard Deck Card Card&lt;/code&gt; will represent the game state where two cards are flipped simultaneously, whether they match or not (the check will be made at the next &lt;code&gt;Flip&lt;/code&gt;, otherwise you wouldn&amp;rsquo;t be able to see the card you just flipped).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Guessing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;MatchCard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cool, now we have to decide how to update our &lt;code&gt;model&lt;/code&gt; whenever a &lt;code&gt;Flip&lt;/code&gt; action comes through:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the game is in the &lt;code&gt;Playing&lt;/code&gt; state, it means we have to flip the first card. This is easy, we&amp;rsquo;ll just transition to the &lt;code&gt;Guessing&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;If the game is in the &lt;code&gt;Guessing&lt;/code&gt; state we can transition to the &lt;code&gt;MatchCard&lt;/code&gt; state. This is where we will check if the game is over later on.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MatchCard&lt;/code&gt; state is the most interesting. We have two cards that the user flipped, and we have to decide if they match and can stay face up or if they should be turned face down (in which case, the current&lt;code&gt;Flip&lt;/code&gt; action does not have any impact on the game, it just resets the model to a &lt;code&gt;Playing&lt;/code&gt; state).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s try to implement this, it is definitely the trickiest part of the game, but it&amp;rsquo;s not that difficult, maybe just a little bit overwhelming if you&amp;rsquo;re not familiar with how to reason in FP yet.&lt;/p&gt;

&lt;p&gt;First, we&amp;rsquo;ll define &lt;code&gt;checkIfCorrect&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;checkIfCorrect&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;checkIfCorrect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;Guessing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Guessing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;newModel&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                    &lt;span class=&#34;kt&#34;&gt;MatchCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;newModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;MatchCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess2&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
                &lt;span class=&#34;cm&#34;&gt;{-&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;                   user has guessed correctly!&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;                   keep both cards flipped and then run update&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;                   again to flip the new card that has been just clicked&lt;/span&gt;
&lt;span class=&#34;cm&#34;&gt;                -}&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Flip&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;
                &lt;span class=&#34;c1&#34;&gt;-- flip the two cards face down because they don&amp;#39;t match&lt;/span&gt;
                &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;flipGuess&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess2&lt;/span&gt;

                    &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
                        &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flipGuess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;
                &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
                    &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then we&amp;rsquo;ll change the &lt;code&gt;Flip&lt;/code&gt; branch in the &lt;code&gt;update&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Flip&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flipped&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;-- if a user clicks on an image that&amp;#39;s flipped already&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;-- then don&amp;#39;t do anything&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;checkIfCorrect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should all make sense, but I want to go over a couple of things that might not be immediately clear.&lt;/p&gt;

&lt;p&gt;First, in order to change the flip status of two cards, we define &lt;code&gt;flipGuess&lt;/code&gt; using function composition (spefically, the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator). Another way of writing &lt;code&gt;flipGuess&lt;/code&gt; would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;flipGuess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;False&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is just easier to write functions as a result of composition, once you understand how that works.&lt;/p&gt;

&lt;p&gt;Second, we can see that &lt;code&gt;update&lt;/code&gt; is calling itself recursively when the two cards match. This is so we don&amp;rsquo;t need to repeat the same logic we already have in the &lt;code&gt;Playing&lt;/code&gt; branch. &lt;code&gt;update&lt;/code&gt; is just a function after all, there&amp;rsquo;s nothing magical behind it and we can use it as any other function!&lt;/p&gt;

&lt;p&gt;You can play with what we have here. You&amp;rsquo;ll see that the game works as expected, except that it never terminates. We need to add one last game state so that we can detect when the player wins and another action to reset the game and start over.&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/i7p&#34;
    width=&#34;100%&#34;
    height=&#34;500&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;h4 id=&#34;step-6-game-over-and-final-touches&#34;&gt;Step 6 – Game over and final touches&lt;/h4&gt;

&lt;p&gt;All right, we&amp;rsquo;re pretty much done!&lt;/p&gt;

&lt;p&gt;The only thing left is to detect when the player has won the game, and display a message to play again. Let&amp;rsquo;s update our &lt;code&gt;Model&lt;/code&gt; and add a new &lt;code&gt;GameOver&lt;/code&gt; state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Guessing&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;MatchCard&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have to change our &lt;code&gt;update&lt;/code&gt; function to transition in the &lt;code&gt;GameOver&lt;/code&gt; state when appropriate. This is done in the &lt;code&gt;Guessing&lt;/code&gt; branch, where we already have a card flipped. When we flip the second card, and all cards are flipped, it means the game is over!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Guessing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;let&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;-- when all cards are flipped, the game is over&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;isOver&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;all&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flipped&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;newModel&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isOver&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;then&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt;
            &lt;span class=&#34;kr&#34;&gt;else&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;MatchCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newDeck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;guess&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;card&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;newModel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;ll have to deal with the &lt;code&gt;GameOver&lt;/code&gt; branch in the &lt;code&gt;update&lt;/code&gt; function as well. This doesn&amp;rsquo;t make much sense because a &lt;code&gt;Flip&lt;/code&gt; action shouldn&amp;rsquo;t come through when the game is over. Still, it&amp;rsquo;s good that the compiler forces us to take care of this as well, and we&amp;rsquo;ll just return the current model as is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s also create a &lt;code&gt;playAgainOverlay&lt;/code&gt; which will be shown when the game finishes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;playAgainOverlay&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;playAgainOverlay&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;congrats&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Yay! You win!&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Do you want to &amp;quot;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;span&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Reset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;play again?&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re adding a new Action to our Messages – &lt;code&gt;Reset&lt;/code&gt; – indicating we want to clear the current game and start fresh. Let&amp;rsquo;s add it to the &lt;code&gt;Msg&lt;/code&gt; type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
    &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;NoOp&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Reset&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;-- add Reset&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Shuffle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Flip&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Card&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the &lt;code&gt;update&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Reset&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;createModel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our addition to &lt;code&gt;update&lt;/code&gt; is extremely straightforward because we already have &lt;code&gt;createModel&lt;/code&gt; laying around and it&amp;rsquo;s exactly what we need. All that is left is to change &lt;code&gt;view&lt;/code&gt; to show the overlay when we&amp;rsquo;re in the &lt;code&gt;GameOver&lt;/code&gt; state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;wrapper&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;wrapper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;overlay&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;wrapper&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;createCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;overlay&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;game&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;game&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;wrapper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;


&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Msg&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;of&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;Playing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;game&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;Guessing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;game&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;MatchCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;game&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt;

        &lt;span class=&#34;kt&#34;&gt;GameOver&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;wrapper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deck&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;playAgainOverlay&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We&amp;rsquo;re changing the markup a bit, but the essence remains the same. The &lt;code&gt;game&lt;/code&gt; function will just show some empty text in place of the overlay when the game is still running.&lt;/p&gt;

&lt;p&gt;This is it! There&amp;rsquo;s other stuff that you might want to add as an exercise, such as counting the moves the player has made and stop the game if it&amp;rsquo;s taking them too long (in terms of time and or moves).&lt;/p&gt;

&lt;p&gt;Hopefully this has been helpful, the full source code is available on &lt;a href=&#34;https://runelm.io&#34;&gt;runelm.io&lt;/a&gt; and you can play with it here directly in your browser!&lt;/p&gt;

&lt;div class=&#34;runelm-wrapper &#34;&gt;
  &lt;iframe
    src=&#34;https://runelm.io/c/fbi&#34;
    width=&#34;100%&#34;
    height=&#34;1000&#34;
    frameBorder=&#34;0&#34;
    sandbox=&#34;allow-forms allow-popups allow-scripts allow-same-origin allow-modals&#34;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;If you enjoyed this article, do let me know and share it along! You can &lt;a href=&#34;https://twitter.com/_alpacaaa&#34;&gt;follow me&lt;/a&gt; on Twitter if this kind of things interest you.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>